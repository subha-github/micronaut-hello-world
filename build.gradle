buildscript{
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE")
        classpath("com.github.jengelman.gradle.plugins:shadow:6.0.0")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.2"
        
    }
}

plugins {
    id "application"
    id "java"
    id "war"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.johnrengelman.shadow'

version "0.1"
group "example.micronaut"

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.3.0.M2'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


dependencies {
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    //tag::micronaut-graal[]
    annotationProcessor("io.micronaut:micronaut-graal")
    //end::micronaut-graal[]
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    //tag::svm[]
    compileOnly("org.graalvm.nativeimage:svm")
    //end::svm[]
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
//    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")

    developmentOnly("io.micronaut.servlet:micronaut-http-server-tomcat:1.0.0")
    implementation("io.micronaut.servlet:micronaut-servlet-engine:1.0.0")

    testAnnotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-http-server-netty")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly

mainClassName = "example.micronaut.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify','-XX:TieredStopAtLevel=1','-Dcom.sun.management.jmxremote')



